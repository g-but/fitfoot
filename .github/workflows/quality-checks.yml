name: Quality Checks & Deployment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  quality-checks:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        workspace: [apps/web, apps/medusa]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Lint code
      run: npm run lint
      working-directory: ${{ matrix.workspace }}
      
    - name: Type check
      run: npm run type-check
      working-directory: ${{ matrix.workspace }}
      continue-on-error: true
      
    - name: Run unit tests
      run: npm run test:coverage
      working-directory: ${{ matrix.workspace }}
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ${{ matrix.workspace }}/coverage/lcov.info
        flags: ${{ matrix.workspace }}
        name: ${{ matrix.workspace }}-coverage
        
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      working-directory: apps/web
      
    - name: Build applications
      run: |
        npm run build --workspace=apps/web
        npm run build --workspace=apps/medusa
        
    - name: Start services
      run: |
        npm run start --workspace=apps/medusa &
        npm run start --workspace=apps/web &
        sleep 30
        
    - name: Run E2E tests
      run: npm run test:e2e
      working-directory: apps/web
      
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: playwright-test-results
        path: apps/web/test-results/
        
  performance-tests:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      working-directory: apps/web
      
    - name: Run Lighthouse CI
      run: npm run lighthouse
      working-directory: apps/web
      
    - name: Run performance tests
      run: npm run test:performance
      working-directory: apps/web
      continue-on-error: true
      
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run npm audit
      run: npm audit --audit-level moderate
      continue-on-error: true
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium
      continue-on-error: true
        
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-checks, e2e-tests, performance-tests]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Vercel (Staging)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: apps/web
        alias-domains: staging-fitfoot.vercel.app
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-checks, e2e-tests, performance-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Vercel (Production)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: apps/web
        
    - name: Post-deployment health check
      run: |
        sleep 60
        curl -f https://fitfoot.ch/api/health || exit 1
        
    - name: Notify Sentry of deployment
      uses: getsentry/action-release@v1
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: fitfoot-web
      with:
        environment: production
        
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify Slack on success
      if: needs.deploy-production.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "üöÄ FitFoot deployed successfully to production!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify Slack on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "‚ùå FitFoot deployment failed. Check the logs."
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}